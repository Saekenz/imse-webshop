import pandas as pd
from app.lib.db_operations import *
import random as rnd

def sql_create_tables(db):
    """ Reads file containing create table statements and executes each statement. """
    cursor = db.cursor()
    sql_content = read_sql_file('app/sql/create_tables.sql')
    statements = split_sql_statements(sql_content)
    for statement in statements:
        cursor.execute(statement)
    db.commit()
    cursor.close()

def sql_drop_tables(db):
    """ Drops all tables from MySQL database. """
    tables_to_drop = ['User_has_Product', 'Product_has_Category', 'Order_has_Product',
                  'Product_is_Accessory_for_Product', 'Invoice', 'Order_', 'User_',
                  'Product', 'Category']
    cursor = db.cursor()
    for table in tables_to_drop:
        query = f'DROP TABLE IF EXISTS {table};'
        cursor.execute(query)
        print(f'Table {table} dropped!')

def sql_fill_table_auto(db, file_path, table):
    """ Function to fill a table (with autogenerated PK) with sample data from a .csv file """
    cursor = db.cursor()
    df = pd.read_csv(file_path)
    num_inserts = len(df)
    for _, row in df.iterrows():
        columns = ', '.join(row.index[0:])
        values = ', '.join([f"'{value}'" for value in row[0:]])
        query = f"INSERT INTO {table} ({columns}) VALUES ({values});"
        cursor.execute(query)
    db.commit()
    print(f'{num_inserts} inserted into {table} table!')

def sql_generate_order_data(num_entries):
    random_order_data = []
    used_combinations = set()

    while len(random_order_data) < num_entries:
        order_id = rnd.randint(1, 40)
        product_id = rnd.randint(1, 50)
        quantity_in_order = rnd.randint(1, 5)

        # Check if combination of order_id and product_id already exists to prevent PK violations
        combination = (order_id, product_id)
        if combination not in used_combinations:
            used_combinations.add(combination)
            random_order_data.append((order_id, product_id, quantity_in_order))

    return random_order_data

def sql_generate_cart_data(num_entries):
    """ Genereate num_entries random entries for User_has_Product table. """
    random_cart_data = []
    used_combinations = set()
    
    while len(random_cart_data) < num_entries:
        user_id = rnd.randint(1, 5)
        product_id = rnd.randint(1, 50)
        quantity_in_cart = rnd.randint(1, 5)

        # Check if combination of user_id and product_id already exists to prevent PK violations
        combination = (user_id, product_id)
        if combination not in used_combinations:
            used_combinations.add(combination)
            random_cart_data.append((user_id, product_id, quantity_in_cart))
    
    return random_cart_data

def sql_fill_order_has_product_table(db):
    cursor = db.cursor()
    insert_query = "INSERT INTO Order_has_Product (order_id, product_id, quantity_in_order) VALUES (%s, %s, %s)"
    data = sql_generate_order_data(80)
    cursor.executemany(insert_query, data)
    db.commit()
    cursor.close()

def sql_fill_user_has_product_table(db):
    cursor = db.cursor()
    insert_query = "INSERT INTO User_has_Product (user_id, product_id, quantity_in_cart) VALUES (%s, %s, %s)"
    data = sql_generate_cart_data(25)
    cursor.executemany(insert_query, data)
    db.commit()
    cursor.close()

def sql_fill_table(db, file_path, table):
    """ Function to fill a table (with composite PK) with sample data from a .csv file """
    cursor = db.cursor()
    df = pd.read_csv(file_path)
    num_inserts = len(df)
    for _, row in df.iterrows():
        values = ', '.join([f"'{value}'" for value in row])
        query = f"INSERT INTO {table} VALUES ({values});"
        cursor.execute(query)
    db.commit()
    print(f'{num_inserts} inserted into {table} table!')

def sql_fill_all_tables(db):
    """ Function to fill all tables with sample data from .csv files. """
    # fill User_ table with sample data
    sql_fill_table_auto(db, 'app/webshop_data/users.csv', 'User_')
    # fill Order_ table with sample data
    sql_fill_table_auto(db, 'app/webshop_data/orders.csv', 'Order_')
    # fill Invoice table with sample data
    sql_fill_table_auto(db, 'app/webshop_data/invoices.csv', 'Invoice')
    # fill Product table with sample data
    sql_fill_table_auto(db, 'app/webshop_data/products.csv', 'Product')
    # fill User_has_Product (Cart) table with sample data
    sql_fill_order_has_product_table(db)
    # fill User_has_Product (Cart) table with sample data
    sql_fill_user_has_product_table(db)